{"ast":null,"code":"var _jsxFileName = \"/Users/olivierwinkler/dev/blockchain/my-wave-portal/frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport { ethers } from \"ethers\";\nimport WavePortal from \"./artifacts/contracts/WavePortal.sol/WavePortal.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]); //const contractAddress = \"0x51450824d71c7d9cd5355CFE4d10Ae85d4d07501\";\n\n  const contractAddress = \"0x9fa39a2552278e1d32db92185eb67969e7e865cf\";\n  const providerOptions = {\n    /* See Provider Options Section */\n  };\n  const web3Modal = new Web3Modal({\n    network: \"mainnet\",\n    // optional\n    cacheProvider: true,\n    // optional\n    providerOptions // required\n\n  });\n\n  const connectWallet = async () => {\n    const provider = await web3Modal.connect();\n    const web3 = new Web3(provider);\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts.length !== 0) {\n      console.log(accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, WavePortal.abi, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        /*\n         * Execute the actual wave from your smart contract\n         */\n\n        const waveTxn = await wavePortalContract.wave(\"this is a message\");\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, WavePortal.abi, signer);\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n\n        const waves = await wavePortalContract.getAllWaves();\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp.getDate() * 1000),\n            message: wave.message\n          });\n        });\n        /*\n         * Store our data in React State\n         */\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    connectWallet();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"\\uD83D\\uDC4B Hey there!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bio\",\n        children: \"I am farza and I worked on self-driving cars so that's pretty cool right? Connect your Ethereum wallet and wave at me!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: wave,\n        children: \"Wave at Me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), !currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: connectWallet,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), allWaves.map((wave, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"OldLace\",\n            marginTop: \"16px\",\n            padding: \"8px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Address: \", wave.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Time: \", wave.timestamp.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Message: \", wave.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"LQFbKAOHPr8MUIDli/eFh2lcheg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/olivierwinkler/dev/blockchain/my-wave-portal/frontend/src/App.tsx"],"names":["React","useEffect","useState","Web3","Web3Modal","ethers","WavePortal","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","providerOptions","web3Modal","network","cacheProvider","connectWallet","provider","connect","web3","accounts","eth","getAccounts","length","console","log","wave","ethereum","window","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","abi","count","getTotalWaves","toNumber","waveTxn","hash","wait","error","getAllWaves","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","getDate","message","map","index","backgroundColor","marginTop","padding","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport { ethers } from \"ethers\";\nimport WavePortal from \"./artifacts/contracts/WavePortal.sol/WavePortal.json\";\nimport \"./App.css\";\n\nconst App = () => {\n  type Wave = {\n    address: string;\n    timestamp: Date;\n    message: string;\n  };\n\n  type WaveStruct = {\n    waver: string;\n    message: string;\n    timestamp: Date;\n  };\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  //const contractAddress = \"0x51450824d71c7d9cd5355CFE4d10Ae85d4d07501\";\n  const contractAddress = \"0x9fa39a2552278e1d32db92185eb67969e7e865cf\";\n\n  const providerOptions = {\n    /* See Provider Options Section */\n  };\n\n  const web3Modal = new Web3Modal({\n    network: \"mainnet\", // optional\n    cacheProvider: true, // optional\n    providerOptions, // required\n  });\n\n  const connectWallet = async () => {\n    const provider = await web3Modal.connect();\n    const web3 = new Web3(provider);\n\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts.length !== 0) {\n      console.log(accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          WavePortal.abi,\n          signer\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = await wavePortalContract.wave(\"this is a message\");\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          WavePortal.abi,\n          signer\n        );\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned: Wave[] = [];\n        waves.forEach((wave: WaveStruct) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp.getDate() * 1000),\n            message: wave.message,\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned as any);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    connectWallet();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">👋 Hey there!</div>\n\n        <div className=\"bio\">\n          I am farza and I worked on self-driving cars so that's pretty cool\n          right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave: Wave, index: number) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: \"OldLace\",\n                marginTop: \"16px\",\n                padding: \"8px\",\n              }}\n            >\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}